// src/utils/toastUtils.ts
// FASE6.1: Toasts centralizados para operaciones de carpetas

import { Platform, ToastAndroid, Alert } from 'react-native';

type FolderToastType = 'add' | 'remove' | 'clean' | 'forceDelete' | 'rename' | 'create';

/**
 * Toast centralizado para operaciones de carpetas
 * Usa ToastAndroid en Android y Alert en iOS
 */
export function showFolderToast(type: FolderToastType, name?: string): void {
  let message = '';

  switch (type) {
    case 'add':
      message = name ? `‚úÖ A√±adido a "${name}"` : '‚úÖ A√±adido a carpeta';
      break;
    case 'remove':
      message = name ? `‚ùå Eliminado de "${name}"` : '‚ùå Eliminado de carpeta';
      break;
    case 'clean':
      message = 'üßπ Limpieza autom√°tica ejecutada';
      break;
    case 'forceDelete':
      message = name ? `üìÅ Carpeta "${name}" eliminada con todo su contenido` : 'üìÅ Carpeta eliminada con todo su contenido';
      break;
    case 'rename':
      message = name ? `üìù Carpeta renombrada a "${name}"` : 'üìù Carpeta renombrada';
      break;
    case 'create':
      message = name ? `‚ú® Carpeta "${name}" creada` : '‚ú® Carpeta creada';
      break;
    default:
      message = '‚úÖ Operaci√≥n completada';
  }

  console.log(`[FASE6.1] showFolderToast: ${type} - ${message}`);

  if (Platform.OS === 'android') {
    ToastAndroid.show(message, ToastAndroid.SHORT);
  } else {
    // iOS: usar Alert simple (m√°s sutil que un alert modal)
    // Alternativamente, podr√≠as usar una librer√≠a como react-native-toast-message
    Alert.alert('', message, [{ text: 'OK' }], { cancelable: true });
  }
}

/**
 * Toast gen√©rico para √©xito
 */
export function showSuccessToast(message: string): void {
  console.log(`[FASE6.1] showSuccessToast: ${message}`);

  if (Platform.OS === 'android') {
    ToastAndroid.show(`‚úÖ ${message}`, ToastAndroid.SHORT);
  } else {
    Alert.alert('', `‚úÖ ${message}`, [{ text: 'OK' }], { cancelable: true });
  }
}

/**
 * Toast gen√©rico para error
 */
export function showErrorToast(message: string): void {
  console.log(`[FASE6.1] showErrorToast: ${message}`);

  if (Platform.OS === 'android') {
    ToastAndroid.show(`‚ùå ${message}`, ToastAndroid.LONG);
  } else {
    Alert.alert('Error', message, [{ text: 'OK' }]);
  }
}

/**
 * Toast gen√©rico para warning
 */
export function showWarningToast(message: string): void {
  console.log(`[FASE6.1] showWarningToast: ${message}`);

  if (Platform.OS === 'android') {
    ToastAndroid.show(`‚ö†Ô∏è ${message}`, ToastAndroid.SHORT);
  } else {
    Alert.alert('', `‚ö†Ô∏è ${message}`, [{ text: 'OK' }], { cancelable: true });
  }
}
